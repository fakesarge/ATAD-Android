import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;

public class APISearch {
	private String hashed,password,amountLeaked;
	
	
	public String search(String password, boolean displayAmount) throws Exception 
	{
		// Get passwords siffix and prefix
		this.password = password;
		String hashedPassword = this.hashPasswordSHA1(password);
		System.out.println(hashedPassword);
		String pf = hashedPassword.substring(0,5);
        String sf = hashedPassword.substring(5);

        
        //initialize the free api
        String apiUrl = "https://api.pwnedpasswords.com/range/" + pf;
        
		HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();
        connection.setRequestMethod("GET");
        
        //Read the results of the API returning
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String line;
        
        // Get the data and check if the password has been leaked
        boolean leaked = false;
    	String leakAmount = null;
    	
 //    	System.out.println("loop");
        while ((line = reader.readLine()) != null) {
//        	System.out.println("in");
            if (line.startsWith(sf.toUpperCase())) {
//            	System.out.println(line);
//            	System.out.println(line.indexOf(':'));
//            	System.out.println(line.substring(line.indexOf(':')+1,line.length()));
            	leakAmount = line.substring(line.indexOf(':')+1,line.length());
            	leaked = true;
                break;
            }
        }
    //	System.out.println("end");

        reader.close();
        

        String output = "";
        
        if (leaked) {
        	output+="PASSWORD: "+password+" LEAKED: "+leaked;
        } else {
            output+="PASSWORD: "+password+" LEAKED: "+leaked;
        }		
        
        if (displayAmount) {
        	output+=" LEAKED AMOUNT: "+amountLeaked;
        }
		
		return output;

	}
	
	
	// HASH THE PASSWORD - Not my code
	private static String hashPasswordSHA1(String password) throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] hashBytes = digest.digest(password.getBytes("UTF-8"));
        StringBuilder hash = new StringBuilder();
        for (byte b : hashBytes) {
            hash.append(String.format("%02x", b));
        }
        return hash.toString().toUpperCase();
    }
	
}
